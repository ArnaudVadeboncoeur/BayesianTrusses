/*
 * BTrussMCMC_MH.cpp
 *
 *  Created on: 12 Dec 2019
 *      Author: arnaudv
 */


#include "../../../src/FEMClass.hpp"

#include "../../../src/statTools/SampleAnalysis.hpp"
#include "../../../src/statTools/histSort.hpp"
#include "../../../src/statTools/KLDiv.hpp"
#include "../../../src/statTools/SteinDiscrepancy.hpp"

#include "../../../src/statTools/MCMC2.hpp"

//#include "../../../src/statTools/MCMC3-SimAnnealing.hpp"



#include <Eigen/Dense>

#include <iostream>
#include <fstream>
#include <vector>
#include <tuple>
#include <random>
#include <cmath>
#include <math.h>

#include "ThreeDTruss.hpp"

std::tuple<Eigen::MatrixXd, std::vector<double> > trueSampleGen(){

    bool verbosity = false;

    std::ofstream myTrueFile;
    myTrueFile.open("trueResults.dat", std::ios::trunc);

    std::normal_distribution<double> normal( 0, 0.001 );

    std::random_device rd;
    std::mt19937 engine( rd() );

    int numSamples = 10;

    std::vector<double> forcing (numSamples) ;

    Eigen::MatrixXd allSamples (numSamples, 3);

    TupleTrussDef TrussDef;
    TrussDef =  InitialTrussAssignment();

    FEMClass trueTrussFem(false, TrussDef );

    for(int i = 0; i < numSamples ; i++){

        double A1 = 0.06 + normal( engine ) ;
        double A2 = 0.04 + normal( engine ) ;
        double A3 = 0.02 + normal( engine ) ;

        trueTrussFem.modA(0, A1);
        trueTrussFem.modA(1, A2);
        trueTrussFem.modA(2, A3);

        trueTrussFem.assembleS( );
        trueTrussFem.computeDisp( );
        trueTrussFem.computeForce( );



        allSamples(i, 0) = trueTrussFem.getDisp( 9 ) ;
        allSamples(i, 1) = trueTrussFem.getDisp(10 ) ;
        allSamples(i, 2) = trueTrussFem.getDisp(11 ) ;



        myTrueFile << A1 << " " << A2 << " " << A3 << " " << allSamples(i, 0)<< " " << allSamples(i, 1)<<" "<< allSamples(i, 2) << '\n';
        //std::cout << A1 <<" " << A2 << '\n';

        trueTrussFem.FEMClassReset(false);
        if( verbosity == true){if( (numSamples > 100 * 5 ) && ( i % (numSamples / ( 20 ) )  == 0 ) ){std::cout << "computed " << i << " samples " <<'\n';}}
    }

    myTrueFile.close();
    //std::cout << allSamples <<std::endl;


    return std::make_tuple(allSamples, forcing );
}


int main(){


    std::tuple<Eigen::MatrixXd, std::vector<double> > trueSamples = trueSampleGen();
    Eigen::MatrixXd trueSampleDisp = std::get<0>( trueSamples );


    using Vec  = Eigen::VectorXd;
    using Func = std::function <double(Vec)>;

    constexpr unsigned Dim = 3 + 3;


    Func pdf = [trueSampleDisp]( Vec x ){


        TupleTrussDef MTrussDef;
        MTrussDef = InitialTrussAssignment( );
        FEMClass MTrussFem( false, MTrussDef );

        MTrussFem.modA( 0, x[0] );
        MTrussFem.modA( 1, x[1] );
        MTrussFem.modA( 2, x[2] );



        MTrussFem.assembleS( );
        MTrussFem.computeDisp( );

        double Mdisp1 = MTrussFem.getDisp( 9 ) ;
        double Mdisp2 = MTrussFem.getDisp( 10 ) ;
        double Mdisp3 = MTrussFem.getDisp( 11 ) ;


        Eigen::Vector3d theta;
        theta << x[0], x[1], x[2];

        Eigen::Vector3d K_thetaInvf;
        K_thetaInvf << Mdisp1, Mdisp2, Mdisp3;

        Eigen::Matrix3d CovMatrixNoise;
        CovMatrixNoise << x[3],   0,     0,
                          0,      x[4],  0,
                          0,      0,     x[5];

        double constNVal =  0.001 *  0.001 ;
        //Eigen::MatrixXd::Identity phi_0 (3);
        Eigen::Matrix3d constN;
        constN.setIdentity();
        constN = constN * constNVal;
        CovMatrixNoise = constN;
        double logLik = 0;

        //  p(y|Theta, Sigma)
        logLik += - (double) trueSampleDisp.rows() / 2.0 * std::log( CovMatrixNoise.determinant() ) ;

        //logLik += - 1. / 2.0 * std::log( CovMatrixNoise.determinant() ) ;

        //std::cout << logLik << " ";

        Eigen::Vector3d y_iVec;
        for(int i = 0; i < trueSampleDisp.rows(); ++i){

            y_iVec[0] = trueSampleDisp( i, 0 );
            y_iVec[1] = trueSampleDisp( i, 1 );
            y_iVec[2] = trueSampleDisp( i, 2 );

            //std::cout << y_iVec << std::endl;

            logLik += - 1./2. * (y_iVec - K_thetaInvf).transpose() * CovMatrixNoise.inverse() * (y_iVec - K_thetaInvf)   ;

        }
        MTrussFem.FEMClassReset(false);

        if( std::isnan(logLik) ){ logLik = -9e30;}
        
//        double Theta1R = 0.1;
//        double Theta2R = 0.1;
//
//        Eigen::VectorXd priorSpan(6); priorSpan << Theta1R,  Theta1R, Theta1R,
//                                                   Theta2R,  Theta2R, Theta2R;
//
//        Eigen::VectorXd map(6); map << 0.06,  0.04,  0.02,
//                                       0.001, 0.001, 0.001;
//
////        double span = 0;
////        for(int i = 0; i <x.size(); ++i){
////            span += pow( x[i] - map[i], 2) / pow( priorSpan[i], 2);
////        }
////        if(span > 1){return -9e30;}
////        else(logLik += 1);


        
        //-Uniform Prior
//        for( int i = 0; i < 3; ++i){
//            if( x[i] <= 0 ) {
//                return -9e30;
//            }
//            if( x[i] > 0.5 ){
//                return -9e30;
//           }
//            }logLik += pow( (1. / 0.5), 1./3.);
//
//        for( int i = 3; i < x.size(); ++i){
//            if( x[i] <= 0 ) {
//                return -9e30;
//            }
//            if( x[i] > 0.02 ){
//                return -9e30;
//}
//            }logLik += pow( (1. / 0.02), 1./3.);



        //Gaussian Prior - Conjugate Prior for Theta p( Theta_0 | Theta_0, sig^2 / k_0 )

        Eigen::Vector3d theta_0;

        theta_0 << 0.01, 0.01, 0.01 ;

        //double k_0  = 1e-4 ; // need k_0 to counter weight of prior
//        double k_0  = 1;
//
//        logLik += - 1./2.* std::log( ( CovMatrixNoise / k_0).determinant() )
//                 - 1./2.* (theta - theta_0).transpose() * (CovMatrixNoise / k_0 ).inverse() * (theta - theta_0) ;

        //std::cout << logLik << " ";

        //Gaussian Prior - Conjugate Prior for sigma Noise
//        double priorPsiSig =  0.001 *  0.001 ;
//        //Eigen::MatrixXd::Identity phi_0 (3);
//        Eigen::Matrix3d phi_0;
//        phi_0.setIdentity();
//        phi_0 = phi_0 * priorPsiSig;
//
//        double nu_0   = 1;
//
//        logLik +=    nu_0/2. * std::log( phi_0.determinant( ) )
//                  -( nu_0 + 2. + 1. ) / 2. * std::log( CovMatrixNoise.determinant( ) )
//                  - 1./2. * ( phi_0 * CovMatrixNoise.inverse() ).trace()  ;
//
//        //std::cout << logLik << " " << std::endl;



        return logLik;
    };

    Eigen::VectorXd map(6); map << 0.06,      0.04,         0.02,
                                   0.001*0.001, 0.001*0.001, 0.001*0.001;
    Vec xStart = map;
//    Vec xStart(Dim); xStart << 0.1,   0.49, 0.001,
//                               0.0001,   0.0001, 0.0001 ;

    double sigTheta = 0.005;
    double sigSigma = 0.0005;
    Vec sigmaInitial(Dim); sigmaInitial << sigTheta,sigTheta,sigTheta, 
                                           sigSigma,sigSigma,sigSigma ;


    Vec lower(Dim); lower << -1e9, -1e9, -1e9, -1e9, -1e9, -1e9 ;
    Vec upper(Dim); upper <<  1e9,  1e9,  1e9,  1e9,  1e9,  1e9 ;
    
    const std::pair< Vec, Vec > bounds = std::make_pair(lower, upper);

    MCMC<Dim,Func, Vec> mcmc(pdf, xStart,sigmaInitial, bounds, false, true);

    mcmc.sample( 1e5 );

    //mcmc.thinSamples( 100 , 3 );

    std::filebuf myFile;
    myFile.open("resultsModel.dat",std::ios::out);
    std::ostream osOut (&myFile);
    mcmc.writeResult(osOut);
    myFile.close();

    std::cout << " Here" << std::endl;

    Vec maxArg = mcmc.getMaxArg();
    std::cout<<".getMaxArg() = : ";

    for(int i = 0; i < Dim; ++i ){

        std::cout<<maxArg[i] << " ";

    }std::cout<<std::endl;
    std::cout<< "Here" << std::endl;
    std::cout<<".getMaxVal() = : "<< mcmc.getMaxVal() <<std::endl;




    return 0;

}


